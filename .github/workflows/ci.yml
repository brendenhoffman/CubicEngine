name: CI
on:
  pull_request:
  push:
    branches: [main]
permissions:
  contents: read
jobs:
  fmt:
    name: rustfmt check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - uses: Swatinem/rust-cache@v2
      - name: cargo fmt --all -- --check
        run: cargo fmt --all -- --check
  clippy:
    name: clippy (matrix)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - aarch64-apple-darwin
          - aarch64-pc-windows-msvc
          - aarch64-unknown-linux-gnu
          - armv7-unknown-linux-gnueabihf
          - i686-unknown-linux-gnu
          - powerpc64le-unknown-linux-gnu
          - riscv64gc-unknown-linux-gnu
          - s390x-unknown-linux-gnu
          - x86_64-apple-darwin
          - x86_64-pc-windows-msvc
          - x86_64-unknown-linux-gnu
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - uses: Swatinem/rust-cache@v2
      - name: rustup target add
        run: rustup target add ${{ matrix.target }}
      # Clippy only needs to type-check; it won't actually link,
      # so we don't need cross linkers.
      - name: cargo clippy (fail on warnings)
        run: cargo clippy --workspace --all-targets --target ${{ matrix.target }} -- -D warnings
  cargo-deny:
    name: cargo-deny (advisories / licenses / bans)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: EmbarkStudios/cargo-deny-action@v2
        with:
          command: check
          # If you want to skip advisory fetches on forks/offline, add:
          # arguments: --disable-fetch
  unsafe-lint:
    name: check #![deny(unsafe_op_in_unsafe_fn)]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@stable
      - name: Ensure crate roots deny unsafe_op_in_unsafe_fn
        shell: bash
        run: |
          set -euo pipefail

          # find all potential crate roots (src/lib.rs or src/main.rs)
          mapfile -t roots < <(git ls-files | grep -E '(^|/)src/(lib|main)\.rs$')

          if [ ${#roots[@]} -eq 0 ]; then
            echo "No crate roots found (src/lib.rs or src/main.rs)."
            exit 0
          fi

          missing=()
          for f in "${roots[@]}"; do
            if ! grep -q '^\s*#!\[\s*deny\s*\(\s*unsafe_op_in_unsafe_fn\s*\)\s*\]\s*$' "$f"; then
              missing+=("$f")
            fi
          done

          if [ ${#missing[@]} -ne 0 ]; then
            echo "::error::The following crate roots are missing \`#![deny(unsafe_op_in_unsafe_fn)]\`:"
            printf ' - %s\n' "${missing[@]}"
            echo ""
            echo "Add this at the very top of each listed file:"
            echo '    #![deny(unsafe_op_in_unsafe_fn)]'
            exit 1
          fi

          echo "All crate roots contain #![deny(unsafe_op_in_unsafe_fn)]. âœ…"
  # Gate merges on everything passing
  ci-ok:
    name: all checks
    runs-on: ubuntu-latest
    needs: [fmt, clippy, cargo-deny, unsafe-lint]
    steps:
      - run: echo "All good!"
